
plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	if (project.use_third_party_mods == 'true') {
		maven {
			name = 'Modrinth'
			url = 'https://api.modrinth.com/maven'
			content {
				includeGroup 'maven.modrinth'
			}
		}
		maven {
			url = 'https://cursemaven.com'
			content {
				includeGroup 'curse.maven'
			}
		}
	}
	maven {
		name "Siphalor's Maven"
		url 'https://maven.siphalor.de/'
	}
	maven {
		name = 'TerraformersMC'
		url = 'https://maven.terraformersmc.com/releases'
	}
	maven {
		url = 'https://maven.shedaniel.me/'
	}
	maven {
		name = 'JitPack'
		url = 'https://jitpack.io'
	}
	maven {
		name = 'NucleoidMC'
		url = 'https://maven.nucleoid.xyz/'
	}
	mavenCentral()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version_1_20_4}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings_1_20_4}:v2"

	// Required Fabric API modules
	modImplementation fabricApi.module('fabric-api-base', project.fabric_api_version_1_20_4)
	modImplementation fabricApi.module('fabric-lifecycle-events-v1', project.fabric_api_version_1_20_4)
	modImplementation fabricApi.module('fabric-key-binding-api-v1', project.fabric_api_version_1_20_4)

	// Amecs API


	// ModMenu
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version_1_20_4}"
	// Cloth Config
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version_1_20_4}") {
		exclude(group: 'net.fabricmc.fabric-api')
	}
}

processResources {


	from("${rootDir}/assets/icon.png") {
		into "assets/toomanybinds/"
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release.set(targetJavaVersion)
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.


	}

}